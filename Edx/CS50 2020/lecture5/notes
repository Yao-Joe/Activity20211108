Notes here!!!

/*
This week introduces data structure, very important concept.
*/

1. linked list
Use "struct", ".", "*" to build customed data structure

 ----- 
|  1  |   
 ----- 
|0x456|   // 0x456 is not address of 1. 0x456 points to 2
 ----- 
   |     -----   
   ---->|  2  |     
         ----- 
        |0x789|   
         ----- 
           |     ----- 
           ---->|  3  |   
                 ----- 
                |NULL |   
                 ----- 
Use more spaces in memory to store linked list data. 
A good reason is array can only allocate continuous memory. If we need add more numbers to array and no more spaces in the end in memory, it will go wrong.
While using linked list will not have this problem.

2. "segementation fault"
For people who have seen the "segementation fault" before, at least I saw it a couple of times, this happens when you touch memory to which you are not allowed.
For instance, if node *list = NULL, if not assign to NULL, list will point to any garbage memory and may cause this fault.
Therefore, alaways check NULL when using malloc(), if no memory or something wrong made by programmer, then immediately detect it.
Just mention an inspiring point: programmer more experienced to you that would make mistake.

3. binary search tree (eg2)
If linked list cannot be sorted, it's useless in most cases. So binary search tree is a special sorted data structure based on linked list.
search, delete, insert: Θ(logn) O(n) reference: https://www.bigocheatsheet.com/
The worst case is all the values are in the same side. 

4. hash table
 ---    -----
| A-|--|-> |p| //p means pointer to the next node. if none, p = NULL
 ---    -----
| B-|--|-> |p|
 ---    -----
| C-|--|-> |p|
 ---    -----
| D-|--|-> |p|
 ---    -----
| E-|--|-> |p|
 ---    -----
 basically, hash table is constructed by array of linked list.
 search, delete, insert: Θ(1) O(n) reference: https://www.bigocheatsheet.com/
 The worst case is all the values are in the same linked list
 
5.tries
 Tries is tree of array. constant time, but times memory.
 
6.queue
 FIFO, which is first in first out, with enqueue and dequeue to put in and out values
 
7.stacks
 LIFO, which is last in first out, with push and pop to put in and put out values
 
8.dictionaries
It stores key value pair. And key is unique.
