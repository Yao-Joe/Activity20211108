###shell 基础###
echo -e 支持反斜线控制得字符转换 echo -e "a\tb\tc\nd\te\tf"
dos2unix windows文件转换linux文件
history !n 重复执行第n条命令 !! 重复执行上一条命令 !字串  重复执行最后一条以该字串开头的命令
tab 补全  tab tab 查看多个
alias 别名=‘原命令’ alias 查看命令别名
--------------------------Bash常用快捷键---------------------------
ctrl C 强制中止当前命令
ctrl L 清屏
ctrl U 删除或剪切光标之前的命令
ctrl Y粘贴
ctrl R 在历史命令中搜索
ctrl D 退出当前终端
ctrl Z 暂停并放入后台（多了会占用资源）
--------------------------输入输出重定向---------------------------
> 将命令正确输出结果写入文件，覆盖
>>  将命令正确输出结果写入文件，追加
2> 将命令正确输出结果写入文件，覆盖
2>> 将命令正确输出结果写入文件，追加
&> 将正确输出和错误输出都写入同一文件当中，覆盖
&>> 将正确输出和错误输出都写入同一文件当中，追加
[command] >> [file] 2>> [file]  将正确输出和错误输出写入不同文件当中，追加
wc < [file] 输入重定向，统计行数，单词数，字符数
--------------------------多命令顺序执行与管道符---------------------------
;  分布执行多个命令，命令之间没有逻辑关系
date ; dd if=/dev/zero of=/root/testfile bs=1k count=100000 ; date 创建一个100M的文件
&& 逻辑与
|| 逻辑或
[command] && echo yes || echo no
| 前一个命令的正确输出作为后一个命令的*操作对象*
ls /etc/ | more 分屏显示命令结果
netstat -an | grep "ESTABLISHED"
grep [option] "搜索内容" 文件名 -i 不区分大小写 -n 显示行号 -v 反向查找 --color=auto 颜色显示输出的关键字
--------------------------通配符---------------------------
？匹配任意一个字符
* 匹配0个或者一个，多个任意字符，也就是说可以匹配任何内容
[] 匹配中括号中任意一个字符。[abc]代表一定匹配一个字符，a或者b或者c。
[-] 匹配中括号中任意一个字符，-代表一个范围。比如：[a-z]，代表匹配一个小写字母
[^] 逻辑非，表示匹配不是中括号中的一个字符
‘’ 单引号中所有的特殊符号，如“$"，都没有特殊含义
"" 双引号中特殊符号都没有特殊含义，但”$"," ' “，”\"是例外，分别是“调用变量的值”，“引用命令”和“转义符”
$() 引用命令（可以代替反引号，便于人眼识别
# 注释
$ 用于调用变量的值，如需要调用变量name的值时，需要用$name
--------------------------用户自定义变量---------------------------
变量命令可以由数字，字母和下划线组成，但不能以数字开头。Bash默认变量都是字符串类型。
变量赋值等号两边不能有空格，变量值中可以使用转义符
aa="$aa"123 或者 aa=${aa}123变量允许叠加，只需要用“”或${}将变量名括起来
环境变量尽量大写，与系统命令区分
set 查看变量
unset 删除变量
--------------------------环境变量---------------------------
用户自定义的shell变量只在当前的shell生效，环境变量会在当前的shell和这个shell的所有子shell当中生效。如果环境变量写入相应的配置文件，那么这个环境变量就会在所有的shell中生效
export 变量名=变量值 申明变量
env 查询变量
unset 变量名 删除变量
PATH=“$PATH":/root
PS1 定义系统提示符的变量 可以修改
PS1=‘[\u@\t \W] \$ ’
--------------------------位置参数变量---------------------------
$n n代表数字，$0代表命令本身，$1-9代表第一到第9个参数，十以上的参数需要用大括号${10}
$# 命令行中所有参数的个数
$* 命令行中所有的参数，把所有的参数当成一个整体
$@ 命令行中所有的参数，把所有的参数区分对待
--------------------------预定义变量---------------------------
（位置参数变量是预定义变量的其中之一）
$? 最后一次命令执行的返回状态，0代表正确
$$ 当前进程的进程PID
$! 后台运行的最后一个进程的进程号（PID）
read [选项] [变量名] 接受键盘输入 -p 等待输入时，输出提示信息 -t 秒数 等待用户输入时间
    -n 字符数 只接受指定的字符数就会执行 -s 隐藏输入的数据
--------------------------数值运算和运算符--------------------------
declare +/- [选项] [变量名] - 设定 +取消设定 -i 指定整数类型 -x 指定环境变量 -p显示变量类型
$() 表示括起来的是系统命令 
$(()) 表示括起来的是数值运算 或者 $[]。$(( $a+$b))
--------------------------变量测试与内容替换--------------------------
x=${y-新值} 让计算机明白判断结果，更多内容查表 
--------------------------环境变量配置文件-------------------------
环境配置变量文件中主要定义对系统操作环境生效的系统默认环境变量，比如PATH、HISTSIZE、PSI、HOSTNAME等默认环境变量。/etc/profile; /etc/profile.d/*.sh; ~/.bash_profile; ~/.bashrc; /etc/bashrc。其他配置文件还有~/.bash_logout; ~/.bash_history; /etc/issue 本地终端欢迎信息；/etc/motd 登陆后欢迎信息，适用于本地登录和远程登陆
source 配置文件 让配置文件直接生效，无需重启和重新登陆
. 配置文件 source的简写

###shell 编程###
--------------------------正则表达式与通配符-------------------------
正则表达式在文件中匹配符合条件的字符串，正则是包含匹配。grep, awk, sed等命令支持正则。
通配符匹配符合条件的文件名，通配符是完全匹配。ls, find, cp这些命令不支持正则，所以只能使用shell自己的通配符来匹配。
基础的正则表达式：
* 前一个字符匹配0次或任意多次 "a*" 匹配所有内容 aa*匹配含一个a的行 aaa*匹配含两个a的行
. 匹配除了换行符外任意一个字符 s..d 匹配sold的行 s.*d 匹配含有s，d的行
^ 匹配行首 ^hello 匹配行首是hello的开头的行 -n ^S 匹配空白行
$ 匹配行尾 hello& 匹配以hello结尾的行 -n ^S 匹配空白行
[] 匹配中括号中任意一个字符，只匹配一个字符，不能匹配换行符 "r[au]n" "^[0-9]"
[^] 匹配中括号的字符以外的任意一个字符 “^[^0-9]” “^[^a-z]" "^[^a-zA-Z]"
\ 转义符 "\.$"
\{n\} 表示前面的字符恰好出现n次 [1][3-8][1-9]\{n\} 匹配手机号码
\{n, \} 表示其前面的字符出现不小于n次 [0-9]\{2, \} 表示两位及以上的数字
\{n, m\} 表示其前面的字符至少出现n此，最多出现m次 [a-z]\{6, 8\} 匹配6-8位的小写字母
--------------------------字符截取命令-------------------------
cut [选项] 文件名 提取命令 -f列号 -d分隔符，局限在于分隔符是空格不易识别。制表符, :, 没问题
cut -d ":" -f 1,3 /etc/passwd
如果cut能完成，用cut，否则用awk，awk非常复杂
printf '输出类型输出格式' 输出内容 
printf %ns 输出字符串。n是数字指代输出几个字符 printf "%s %s %s\n" 1 2 3 4 5 6
printf %ni 输出整数。n是数字指代输出几个整数
printf %m，nf 输出浮点数。m位数，n位小数
printf '%s' $(cat student.txt)
awk ‘条件{动作}条件1{动作1}...’ 文件名 df -h | awk ‘{printf $2 "\t" $6 }' 
awk 'BEGIN {FS=":"} {printf $1 "\t" $3 "\n"}' 在第一行读取之前确定分隔符
awk 'END {printf "The End \n"} {print $1 "\t" $3}' 
awk ' $6 >= 87{print $2 "\n"}'  
awk功能很多，可以看作另一个变成语言，但是一般都在shell编程，awk只作简单的cut功能
sed Stream Editor 是一种轻量级流编辑器，可对数据选取，替换，删除，新增
sed 选项 '动作' 文件名  -n 只输出sed命令处理的行 -e 允许多个sed命令同时编辑 -i 修改文件内容（推荐vim，出错率低）
动作：a\ 追加 添加一行或多行，添加多行时，除末尾外每行尾都需要加\
    c\ 替换 i\ 插入 d 删除 p 打印 s/旧字串/新字串/g 替换行间具体数据
df -h | sed -n 'p' 这是vim做不到，但sed能做到的，管道符
sed '2,4d' 
--------------------------字符处理命令-------------------------
sort 选项 文件名 -f 忽略大小写 -n 数值型排序，默认字符串型排序 -r 反向排序 -t 指定分隔符，默认制表符
wc 选项 文件名 统计命令 -l 只统计行数 -w 只统计单词数 -m 只统计字符数
---------------------------条件判断-------------------------
-d 文件 判断该文件是否存在，并且是否为目录文件，是目录为真
-e 文件 判断该文件是否存在， 存在为真
-f 文件 判断该文件是否存在，并且是否为普通文件（是普通文件为真）
test [选项] [文件] 
[ 选项 文件 ] （中括号里面有俩空格）
-r -w -x 判断文件是否存在，并且是否该文件拥有读，写，执行权限（有返回真）(但是不区分用户组)
文件1 -nt 文件2 文件1的修改时间比文件2新，返回真
文件1 -ot 文件2 文件1的修改时间比文件2旧，返回真
文件1 -ef 文件2 判断inode号，判断是否同一文件
-eq 相等 -ne 不等 -gt 大于 -lt小于 -ge大于等于 -le 小于等于 （整数比较）
-z 空为真 -n 非空为真 == 相等 != 不等 （字符串）（常用）
-a 逻辑与 -o 逻辑或  ！逻辑非（多重判断条件）
--------------------------流程控制if-------------------------
if [ 条件 ]
then
elif [ 条件 ]
then
else
fi
--------------------------流程控制case-------------------------
case适合打印列表
read -t 30 -p " please insert a number: " cho
case "$cho" in 
值1)
echo ""
;;
值2)
echo ""
;;
*)
echo ""
;;
esac
--------------------------流程控制for-------------------------
for  变量 in 值1 值2 值3..
do
程序
done
do和done相当于括号
for (( 初始值; 循环控制条件; 变量变化 ))
do
done
--------------------------流程控制while&until-------------------------
while [ 条件判断式 ]
do
done
until就是和while反过来
until [ 条件判断式 ]
do
done
